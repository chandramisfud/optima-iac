using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.StaticFiles;
using Repositories.Contracts;
using Repositories.Entities.Models;
using V7.Services;

namespace V7.Controllers.Tools
{
    [LoggingIntercept]
   
    public partial class ToolsController : BaseController
    {
        /// <summary>
        /// Upload FIles
        /// </summary>
        /// <param name="formFiles"></param>
        /// <param name="subDirectory"></param>
        /// <returns></returns>
        [HttpPost("api/tools/file/upload", Name = "Upload_File")]
        public IActionResult Upload([FromForm][Required] List<IFormFile> formFiles, [Required] string subDirectory)
        {
            try
            {
                __fileService.UploadFiles(formFiles, subDirectory);
                return Ok(new BaseResponse { code = 200, error = false, message = "Success uploading " + formFiles.Count + " file(s)" });
            }
            catch (Exception __ex)
            {
                return BadRequest(new BaseResponse { error = true, code = 400, message = __ex.Message });
            }
        }

        /// <summary>
        /// Upload file to specific dir
        /// </summary>
        /// <param name="subDirectory"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet("api/tools/file/dl/{subDirectory}/{id}", Name = "GetFileDownload")]
        public IActionResult dl(string subDirectory, int id)
        {
            try
            {
                var files = Directory.GetFiles(Path.Combine(__fileService.GetRootPath(), subDirectory)).ToList();
                //int i = 0;
                new FileExtensionContentTypeProvider().TryGetContentType(files[id], out string? contentType);
                contentType ??= "application/octet-stream";
                byte[] b = System.IO.File.ReadAllBytes(files[id]);
                return File(b, contentType, Path.GetFileName(files[id]));
            }
            catch (Exception __ex)
            {
                return BadRequest(new BaseResponse { error = true, code = 400, message = __ex.Message }); ;
            }
        }


        /// <summary>
        /// API controller to handle direct file download
        /// </summary>
        /// <remarks>uniq file code was generated by database</remarks>
        /// <param name="filecode">unique file code</param>
        /// <returns></returns>
        [HttpGet("api/tools/file/{filecode}", Name = "Get_FileByCode")]
        public IActionResult Index(string filecode)
        {
            try
            {
                string dirPath = __config.GetSection("FileStorageDir").Value!;
                var files = __fileRepo.GetFilesByCode(filecode);
                var filePath = Path.Combine(__fileService.GetRootPath(), dirPath, filecode);
                //int i = 0;
                new FileExtensionContentTypeProvider().TryGetContentType(filePath, out string? contentType);
                contentType ??= "application/octet-stream";
                byte[] b = System.IO.File.ReadAllBytes(filePath);
                return File(b, contentType, files.Result.flename);
            }
            catch (Exception __ex)
            {
                return BadRequest(new BaseResponse { error = true, code = 400, message = __ex.Message }); ;
            }
        }

        /// <summary>
        /// API controller to handle direct file view
        /// </summary>
        /// <remarks>uniq file code was generated by database</remarks>
        /// <param name="filecode">unique file code</param>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpGet("api/tools/file/view/{filecode}", Name = "Get_FileViewByCode")]
        public async Task<IActionResult> view(string filecode)
        {
            try
            {
                string dirPath = __config.GetSection("FileStorageDir").Value!;
                var files = await __fileRepo.GetFilesByCode(filecode);
                var filePath = Path.Combine(__fileService.GetRootPath(), dirPath, filecode);
                byte[] b = System.IO.File.ReadAllBytes(filePath);

                return File(b, "image/jpg");
            }
            catch (Exception __ex)
            {
                return BadRequest(new BaseResponse { error = true, code = 400, message = __ex.Message });
            }
        }
    }
}